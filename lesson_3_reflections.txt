Question: When would you want to create a remote repository rather than keeping all of your work local?

Creating a remote repository is a better option when collaborating with other people, or when making changes to a repository from different computers.

Question: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Manually pulling changes might be better for if you don't finish a feature to your repository, or if it is a test feature you are doing that you do not want others to see until completed.

Question: Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork: copy a repository from another location, and create your own repository. Would use when not wanting to change another person's repository.
Clone: copy a repository. Would use when making a new branch, but want to keep old branch information.
Branch: a change made to a repository (ie master, coin, etc.). Would use when making a new feature to a repository that is not always going to be shown (ie "test" code or optional version).

Question: What is the benefit of having a copy of the last known state of the remote stored locally?

If you go offline, having the most recent copy means you can edit from the most recent edits without fear of missing something up to that point.

Question: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Online social media, slack, email. It would be time consuming and inefficient!

Question: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Making changes in a separate branch would be beneficial when you are working in a group, and are making a change that others need to accept before adding it to the master branch. A benefit of making a change directly in a master branch is if the change is a more universal change that will most likely be agreed upon by others, like adding new code versus changing code that is already present.
